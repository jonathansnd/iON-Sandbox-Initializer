<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" version="CE-3.2.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"  	xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:https="http://www.mulesoft.org/schema/mule/https" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd 
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/4.0/mule-sfdc.xsd 
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/3.2/mule-vm.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/https http://www.mulesoft.org/schema/mule/https/3.2/mule-https.xsd">


	<sfdc:config name="Salesforce" username="dummy" password="dummy" securityToken="dummy" doc:name="Salesforce"/>

	<https:connector name="httpsConnector">
        <https:tls-key-store path="${app.home}/keystore.jks" keyPassword="ucsf1234" storePassword="ucsf1234"/>
        <https:tls-server path="${app.home}/keystore.jks" storePassword="ucsf1234"/>
        
    </https:connector>
   
    <flow name="resourceFlow" doc:name="resourceFlow">
		<inbound-endpoint address="https://localhost:${https.port}/static" exchange-pattern="request-response"/>
    	<https:static-resource-handler resourceBase="${app.home}/docroot" defaultFile="form.html"></https:static-resource-handler>
    </flow>
        
    <flow name="describeSFDCAccountFlow1" doc:name="describeSFDCAccountFlow1">
        <inbound-endpoint address="https://localhost:${https.port}/sfdc" doc:name="HTTP" exchange-pattern="request-response"></inbound-endpoint>
 
        <choice doc:name="Choice">
            <when expression="inbound:http.method=POST" evaluator="header">
            	<http:body-to-parameter-map-transformer />
				
				<logger message="After submit, payload: #[groovy:payload.userOrig]" level="INFO" doc:name="Submit Logger"/>
				
				<!-- Save Origin connections parameters as message properties-->
				<message-properties-transformer scope="session">
					<add-message-property key="userOrig" value="#[groovy:payload.userOrig]" />
					<add-message-property key="passOrig" value="#[groovy:payload.passOrig]" />
					<add-message-property key="tokenOrig" value="#[groovy:payload.tokenOrig]" />
					<add-message-property key="userDest" value="#[groovy:payload.userDest]" />
					<add-message-property key="passDest" value="#[groovy:payload.passDest]" />
					<add-message-property key="tokenDest" value="#[groovy:payload.tokenDest]" />
				</message-properties-transformer>
				
				<logger message="After property set, property: #[header:session:userOrig]" level="INFO" doc:name="Property Logger"/>
						
                <processor-chain>
                	<!-- Describe account objects -->
                    <sfdc:describe-global username="#[header:session:userOrig]" password="#[header:session:passOrig]" securityToken="#[header:session:tokenOrig]" doc:name="Salesforce"/>
                    <expression-transformer evaluator="groovy" expression="(List)payload.sobjects" doc:name="Expression"/>
                    
                    <!-- Splitter works as a foreach. For each of the objects received will execute the rest of the flow -->
<!--                    <collection-splitter doc:name="Collection Splitter"/>-->
                    <expression-transformer evaluator="groovy" expression="(String)payload.name" doc:name="Expression"/>
                    
                    <!-- Filter messages (for testing purposes) -->
                    <message-filter doc:name="Message">
                        <wildcard-filter pattern="*__c*" caseSensitive="true"/>
                    </message-filter>
                  
                    
                    <logger message="Object Name: #[payload]" level="INFO" doc:name="Object Name Logger"/>
                                        
	                <!-- Describe each object -->  
<!--                    <sfdc:describe-sobject type="#[payload]" username="#[header:SESSION:userOrig]" password="#[header:SESSION:passOrig]" securityToken="#[header:SESSION:tokenOrig]"></sfdc:describe-sobject>-->
                    
<!--                    <logger message="Object content: #[groovy:payload.getClass().getName()]" level="INFO" doc:name="Object Content Logger"/>-->
                    
                <custom-transformer class="com.mulesoft.util.ObjectNamesHTMLTransformer" />
<!--                <vm:outbound-endpoint path="ObjectProcessor" exchange-pattern="request-response" />-->
                </processor-chain>
           </when>
        </choice>
        <object-to-string-transformer/>  
        <message-properties-transformer scope="outbound"> 
            <add-message-property key="Content-type" value="text/html"/> 
        </message-properties-transformer> 
    </flow>

    <flow name="Flow3" doc:name="Flow3">
    	<inbound-endpoint address="https://localhost:${https.port}/results" doc:name="HTTP" exchange-pattern="request-response"></inbound-endpoint>
        <choice doc:name="Choice">
            <when expression="inbound:http.method=GET" evaluator="header">
                <logger message="Flow3, GET payload: #[payload]" level="INFO" doc:name="Property Logger"/>

            </when>
            <when expression="inbound:http.method=POST" evaluator="header">
            	<http:body-to-parameter-map-transformer />
            	<logger message="Flow3, POST payload: #[payload]" level="INFO" doc:name="Property Logger"/>
            	<logger message="Flow3, POST payload contents: #[groovy:payload.objectsCombo]" level="INFO" doc:name="Property Logger"/>
            	<logger message="Flow3, POST payload contents: #[groovy:payload.userOrig]" level="INFO" doc:name="Property Logger"/>
            	<logger message="Flow3, POST payload contents: #[groovy:payload.userDest]" level="INFO" doc:name="Property Logger"/>
             	<custom-transformer class="com.mule.hackathon.SandboxInitializer" />
            </when>
        </choice>
        <logger message="Flow3, payload: #[payload]" level="INFO" doc:name="Property Logger"/>
        <object-to-string-transformer/>  
        <message-properties-transformer scope="outbound"> 
            <add-message-property key="Content-type" value="text/html"/> 
        </message-properties-transformer>        
    </flow>
</mule>
